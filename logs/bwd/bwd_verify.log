HOOK before cast: <class 'tuple'> 1 torch.Size([256, 2048])
before grad_input: tensor([-2.7424e-07, -6.8289e-07, -1.4918e-06,  ...,  1.5755e-06,
        -6.2934e-07, -1.8950e-06], device='cuda:0')
HOOK after cast: <class 'tuple'> 1 torch.Size([256, 2048])
after grad_input: tensor([-2.7404e-07, -6.8266e-07, -1.4910e-06,  ...,  1.5749e-06,
        -6.2911e-07, -1.8943e-06], device='cuda:0')
stop here
HOOK before cast: <class 'tuple'> 1 torch.Size([256, 2048, 5, 5])
before grad_input: tensor([[[-1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08],
         [-1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08],
         [-1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08],
         [-1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08],
         [-1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08, -1.0962e-08]],

        [[-2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08],
         [-2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08],
         [-2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08],
         [-2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08],
         [-2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08, -2.7306e-08]],

        [[-5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08],
         [-5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08],
         [-5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08],
         [-5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08],
         [-5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08, -5.9642e-08]],

        ...,

        [[ 6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08],
         [ 6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08],
         [ 6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08],
         [ 6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08],
         [ 6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08,  6.2995e-08]],

        [[-2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08],
         [-2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08],
         [-2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08],
         [-2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08],
         [-2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08, -2.5164e-08]],

        [[-7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08],
         [-7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08],
         [-7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08],
         [-7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08],
         [-7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08, -7.5772e-08]]],
       device='cuda:0')
HOOK after cast: <class 'tuple'> 1 torch.Size([256, 2048, 5, 5])
after grad_input: tensor([[[-1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08],
         [-1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08],
         [-1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08],
         [-1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08],
         [-1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08, -1.0958e-08]],

        [[-2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08],
         [-2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08],
         [-2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08],
         [-2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08],
         [-2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08, -2.7299e-08]],

        [[-5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08],
         [-5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08],
         [-5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08],
         [-5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08],
         [-5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08, -5.9605e-08]],

        ...,

        [[ 6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08],
         [ 6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08],
         [ 6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08],
         [ 6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08],
         [ 6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08,  6.2981e-08]],

        [[-2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08],
         [-2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08],
         [-2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08],
         [-2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08],
         [-2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08, -2.5160e-08]],

        [[-7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08],
         [-7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08],
         [-7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08],
         [-7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08],
         [-7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08, -7.5728e-08]]],
       device='cuda:0')
stop here
